<?php
/**
 * Created by PhpStorm.
 * User: 94468
 * Date: 2017/10/23
 * Time: 8:51
 */
use EasyWeChat\Foundation\Application;
class WechatAction extends BaseAction
{
    // 重载掉认证
    function _initialize()
    {
        // parent::_initialize(); // TODO: Change the autogenerated stub
        $option = C('wechat_option');
        $app = new Application($option);
        $this->app = $app;
        $this->server = $app->server;
        import('@.Lib.WechatLogic');
        $this->_logic = new WechatLogic($app);
    }

    /**
     * 处理微信服务器发来的所有消息和事件
     */
    public function index(){
        $this->server->setMessageHandler([$this->_logic, 'messageHandle']);

        $response = $this->server->serve();
        $response->send();
    }
    /**
     * 设置参数的页面
     * @return [type] [description]
     */
    public function option(){
        parent::_initialize();
        $this->display();
    }
    /**
     * 管理用户
     * @return [type] [description]
     */
    public function user(){
        // 记得验证
        parent::_initialize();

        $this->initUniqid();
        $this->initUniqid(GROUP_NAME.'Wechat/editRemark','edit_remark_');
        // $this->initUniqid(GROUP_NAME.'Wechat/addBlackList','add_black_list_');

        $user = $this->app->user;

        // 获取用户openid列表
        $result = $user->lists();
        $openids = $result->data['openid'];

        // 获取用户信息
        $users = $user->batchGet($openids);
        if($users)
            $users = $users->user_info_list;
        // 获取黑名单列表
        $black = $user->blacklist()->all()['data']['openid'];

        foreach($users as $k => $v){
            $users[$k]['is_black'] = in_array($v['openid'], $black);
        }

        /**
         *  array (
              0 => 
              array (
                'subscribe' => 1,
                'openid' => 'oMb3RwXC_QDjzozO5fxdvPmBKtjI',
                'nickname' => '藏锋入鞘',
                'sex' => 1,
                'language' => 'zh_CN',
                'city' => '',
                'province' => '',
                'country' => '',
                'headimgurl' => 'http://wx.qlogo.cn/mmopen/FGYZTQQtLg8BiaGHWOI0sOv3vTMRgLOwcC2uNTEOsJJ0KXt81xWWAMALIqEzSoEHej11hLhuGqZNhmy5AxQlibL94iczJp43lsO/0',
                'subscribe_time' => 1497964488,
                'remark' => '',
                'groupid' => 0,
                'tagid_list' => 
                array (
                ),
              ),
            ),
         */
        $this->data = $users;
        $this->display();
    }
    /**
     * 编辑备注的提交处理
     * @return [type] [description]
     */
    public function editRemark(){
        parent::_initialize();
        if(!IS_POST)
            _404('页面不存在');
        $this->checkFormUniqid(I('post.edit_remark_uniqid'));
        $remark = I('post.remark');
        $openid = I('post.openid');

        $user = $this->app->user;

        // 设置备注
        if($user->remark($openid, $remark))
            $this->redirect('user');
        else
            $this->error('备注设置失败！');
    }
    /**
     * 处理加入黑名单的提交
     */
    public function addBlackList(){
        parent::_initialize();
        if(!IS_POST)
            _404('页面不存在');
        // $this->checkFormUniqid(I('post.uniqid'), 'user');

        $openids = I('post.openid');
        $user = $this->app->user;
        // 是否是添加到黑名单
        $add = I('post.add', 0, 'intval');

        if($add)
            if($user->batchBlock($openids))
                $this->redirect('user');
            else
                $this->error('加入黑名单失败！');
        else
            if($user->batchUnblock($openids))
                $this->redirect('user');
            else
                $this->error('取消黑名单失败！');
    }
    /**
     * 自动回复页面
     * @return [type] [description]
     */
    public function reply(){
        parent::_initialize();
        $this->initUniqid();
        $this->display();
    }
    /**
     * 关键字回复处理
     * @return [type] [description]
     */
    public function keywordHandle(){
        parent::_initialize();

        //验证表单唯一标识码！
        $this->checkFormUniqid(I('post.uniqid'), GROUP_NAME.'/Wechat/reply');

        defined('MODULE_PATH') or define('MODULE_PATH', APP_PATH.'Models/'.GROUP_NAME.'/');
        switch(I('post.type')){
            case 'keyword':
                $keywords = I('post.keywords');
                $content = I('post.contents');
                // 确立一对一关系
                $data = [];
                foreach ($content as $key => $value) {
                    $data[$keywords[$key]] = $value;
                }
                $res = updateConf(MODULE_PATH.'Conf/config.php', ['WECHAT_KEYWORDS'    =>  $data], null);
                break;
            case 'default':
                $content = I('post.content');
                $res = updateConf(MODULE_PATH.'Conf/config.php', ['WECHAT_DEFAULT_REPLY'    =>  I('post.content')], null);
                break;
            case 'subscribe':
                $content = I('post.content');
                $res = updateConf(MODULE_PATH.'Conf/config.php', ['WECHAT_SUBCRIBE_CONTENT'    =>  I('post.content')], null);
                break;
            default:
                $res = ['status' => 0, 'info' => '未知配置类型'];
        }
        if($res['status']) {
            clearUniqid();
            $this->success('修改成功');
        }else{
            $this->error($res['info']);
        }
    }
    /**
     * 获取当前关键字回复列表
     * @return [type] [description]
     */
    public function keywordsList(){
        parent::_initialize();

        $keywords = C('WECHAT_KEYWORDS');

        $data = ['status'=>1, 'data'=>[]];
        foreach($keywords as $k => $v){
            $data['data'][] = [ 'keywords' => $k, 'content' => $v];
        }
        $this->ajaxReturn($data);
    }
    /**
     * 素材管理
     */
    public function material(){
    }
    /**
     * 管理菜单
     * @return [type] [description]
     */
    public function menu(){
        parent::_initialize();

        // 菜单实例
        $menu = $this->app->menu;

        $menus = $menu->all();
        print_r($menus);
    }
    /**
     * 添加菜单
     * @return [type] [description]
     */
    public function menuAdd(){
        parent::_initialize();

        if( !IS_POST){
            $this->display();
        } else {
            
        }
    }
}